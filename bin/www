#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('desktop:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);
let servers = [
                {
                    name: 'TFT',
                    image: 'https://images.contentstack.io/v3/assets/blt731acb42bb3d1659/bltfe81204b8ec63e0e/5e6184a918d3347ceffbbd6d/TFT.S3_GALAXIES.ARTICLE-2.jpg',
                    endpoint: '/tft',
                    room: [
                        {
                            name: 'General', namespace: 'TFT', history: []
                        },
                        {
                            name: 'Builds', namespace: 'TFT', history: []
                        },
                    ]
                },
                {
                    name: 'LoL',
                    image: 'https://images.contentstack.io/v3/assets/blt731acb42bb3d1659/bltfe81204b8ec63e0e/5e6184a918d3347ceffbbd6d/TFT.S3_GALAXIES.ARTICLE-2.jpg',
                    endpoint: '/lol',
                    room: [
                        {
                            name: 'General', namespace: 'LoL', history: []
                        },
                        {
                            name: 'Champions', namespace: 'LoL', history: []
                        },
                    ]
                },
                {
                    name: 'WoW',
                    image: 'https://images.contentstack.io/v3/assets/blt731acb42bb3d1659/bltfe81204b8ec63e0e/5e6184a918d3347ceffbbd6d/TFT.S3_GALAXIES.ARTICLE-2.jpg',
                    endpoint: '/wow',
                    room: [
                        {
                            name: 'General', namespace: 'WoW', history: []
                        },
                        {
                            name: 'PVP', namespace: 'WoW', history: []
                        },
                    ]
                },
            ]

servers.forEach((server) => {
    io.of(server.endpoint).on('connection',(socket) => {

        socket.on('messageToServer', (message) => {
            let roomName = Object.keys(socket.rooms)[1]
            let room = server.room.find((room) => {
                return room.name == roomName
            })
            room.history.push(message)

            io.of(server.endpoint).to(roomName).emit('messageToClient', message)
        })

        socket.on('joinRoom', (roomToJoin) => {

            let roomToLeave = Object.keys(socket.rooms)[1]

            socket.leave(roomToLeave)
            socket.join(roomToJoin)

            let room = server.room.find((room) => {
                return room.name == roomToJoin
            })

            socket.emit('chatHistory', room.history)
        })

    })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
